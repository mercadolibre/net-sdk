/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MeliLibTools.Client;
using MeliLibTools.Model;

namespace MeliLibTools.MeliLibApi
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authentication Endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns></returns>
        void Auth (string responseType, string clientId, string redirectUri);

        /// <summary>
        /// Authentication Endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthWithHttpInfo (string responseType, string clientId, string redirectUri);
        /// <summary>
        /// Request Access Token
        /// </summary>
        /// <remarks>
        /// Partner makes a request to the token endpoint by adding the following parameters described below
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Token</returns>
        Token GetToken (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string));

        /// <summary>
        /// Request Access Token
        /// </summary>
        /// <remarks>
        /// Partner makes a request to the token endpoint by adding the following parameters described below
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Token</returns>
        ApiResponse<Token> GetTokenWithHttpInfo (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authentication Endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthAsync (string responseType, string clientId, string redirectUri);

        /// <summary>
        /// Authentication Endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthAsyncWithHttpInfo (string responseType, string clientId, string redirectUri);
        /// <summary>
        /// Request Access Token
        /// </summary>
        /// <remarks>
        /// Partner makes a request to the token endpoint by adding the following parameters described below
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetTokenAsync (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string));

        /// <summary>
        /// Request Access Token
        /// </summary>
        /// <remarks>
        /// Partner makes a request to the token endpoint by adding the following parameters described below
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTokenAsyncWithHttpInfo (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20Api : IOAuth20ApiSync, IOAuth20ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuth20Api : IOAuth20Api
    {
        private MeliLibTools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth20Api() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth20Api(String basePath)
        {
            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                new MeliLibTools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuth20Api(MeliLibTools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuth20Api(MeliLibTools.Client.ISynchronousClient client,MeliLibTools.Client.IAsynchronousClient asyncClient, MeliLibTools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MeliLibTools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MeliLibTools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MeliLibTools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MeliLibTools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authentication Endpoint 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns></returns>
        public void Auth (string responseType, string clientId, string redirectUri)
        {
             AuthWithHttpInfo(responseType, clientId, redirectUri);
        }

        /// <summary>
        /// Authentication Endpoint 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> AuthWithHttpInfo (string responseType, string clientId, string redirectUri)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'responseType' when calling OAuth20Api->Auth");

            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth20Api->Auth");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuth20Api->Auth");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/authorization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authentication Endpoint 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthAsync (string responseType, string clientId, string redirectUri)
        {
             await AuthAsyncWithHttpInfo(responseType, clientId, redirectUri);

        }

        /// <summary>
        /// Authentication Endpoint 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType"></param>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> AuthAsyncWithHttpInfo (string responseType, string clientId, string redirectUri)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'responseType' when calling OAuth20Api->Auth");

            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth20Api->Auth");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuth20Api->Auth");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/authorization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Access Token Partner makes a request to the token endpoint by adding the following parameters described below
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns></returns>
        public Token GetToken (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string))
        {
            return GetTokenWithHttpInfo(grantType, clientId, clientSecret, redirectUri, code, refreshToken).Data;
        }

        /// <summary>
        /// Request Access Token Partner makes a request to the token endpoint by adding the following parameters described below
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Token> GetTokenWithHttpInfo (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string))
        {
            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", MeliLibTools.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", MeliLibTools.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", MeliLibTools.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", MeliLibTools.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", MeliLibTools.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", MeliLibTools.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Token>("/oauth/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Access Token Partner makes a request to the token endpoint by adding the following parameters described below
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetTokenAsync (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string))
        {
             await GetTokenAsyncWithHttpInfo(grantType, clientId, clientSecret, redirectUri, code, refreshToken);

        }

        /// <summary>
        /// Request Access Token Partner makes a request to the token endpoint by adding the following parameters described below
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> GetTokenAsyncWithHttpInfo (string grantType = default(string), string clientId = default(string), string clientSecret = default(string), string redirectUri = default(string), string code = default(string), string refreshToken = default(string))
        {

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", MeliLibTools.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", MeliLibTools.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", MeliLibTools.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", MeliLibTools.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", MeliLibTools.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", MeliLibTools.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
