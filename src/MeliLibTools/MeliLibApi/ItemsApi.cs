/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MeliLibTools.Client;
using MeliLibTools.Model;

namespace MeliLibTools.MeliLibApi
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ItemsIdGet (string id);

        /// <summary>
        /// Return a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ItemsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Update a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        void ItemsIdPut (string id, string accessToken, Item item);

        /// <summary>
        /// Update a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ItemsIdPutWithHttpInfo (string id, string accessToken, Item item);
        /// <summary>
        /// Create a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        void ItemsPost (string accessToken, Item item);

        /// <summary>
        /// Create a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ItemsPostWithHttpInfo (string accessToken, Item item);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ItemsIdGetAsync (string id);

        /// <summary>
        /// Return a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ItemsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ItemsIdPutAsync (string id, string accessToken, Item item);

        /// <summary>
        /// Update a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ItemsIdPutAsyncWithHttpInfo (string id, string accessToken, Item item);
        /// <summary>
        /// Create a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ItemsPostAsync (string accessToken, Item item);

        /// <summary>
        /// Create a Item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ItemsPostAsyncWithHttpInfo (string accessToken, Item item);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IItemsApiSync, IItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        private MeliLibTools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(String basePath)
        {
            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                new MeliLibTools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(MeliLibTools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ItemsApi(MeliLibTools.Client.ISynchronousClient client,MeliLibTools.Client.IAsynchronousClient asyncClient, MeliLibTools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MeliLibTools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MeliLibTools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MeliLibTools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MeliLibTools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ItemsIdGet (string id)
        {
             ItemsIdGetWithHttpInfo(id);
        }

        /// <summary>
        /// Return a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ItemsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'id' when calling ItemsApi->ItemsIdGet");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", MeliLibTools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/items/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ItemsIdGetAsync (string id)
        {
             await ItemsIdGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Return a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ItemsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'id' when calling ItemsApi->ItemsIdGet");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", MeliLibTools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/items/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        public void ItemsIdPut (string id, string accessToken, Item item)
        {
             ItemsIdPutWithHttpInfo(id, accessToken, item);
        }

        /// <summary>
        /// Update a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ItemsIdPutWithHttpInfo (string id, string accessToken, Item item)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'id' when calling ItemsApi->ItemsIdPut");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling ItemsApi->ItemsIdPut");

            // verify the required parameter 'item' is set
            if (item == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'item' when calling ItemsApi->ItemsIdPut");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", MeliLibTools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "Authorization", $"Bearer {accessToken}"));
            localVarRequestOptions.Data = item;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/items/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ItemsIdPutAsync (string id, string accessToken, Item item)
        {
             await ItemsIdPutAsyncWithHttpInfo(id, accessToken, item);

        }

        /// <summary>
        /// Update a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ItemsIdPutAsyncWithHttpInfo (string id, string accessToken, Item item)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'id' when calling ItemsApi->ItemsIdPut");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling ItemsApi->ItemsIdPut");

            // verify the required parameter 'item' is set
            if (item == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'item' when calling ItemsApi->ItemsIdPut");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", MeliLibTools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "Authorization", $"Bearer {accessToken}"));
            localVarRequestOptions.Data = item;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/items/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        public void ItemsPost (string accessToken, Item item)
        {
             ItemsPostWithHttpInfo(accessToken, item);
        }

        /// <summary>
        /// Create a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ItemsPostWithHttpInfo (string accessToken, Item item)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling ItemsApi->ItemsPost");

            // verify the required parameter 'item' is set
            if (item == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'item' when calling ItemsApi->ItemsPost");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "Authorization", $"Bearer {accessToken}"));
            localVarRequestOptions.Data = item;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ItemsPostAsync (string accessToken, Item item)
        {
             await ItemsPostAsyncWithHttpInfo(accessToken, item);

        }

        /// <summary>
        /// Create a Item. 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ItemsPostAsyncWithHttpInfo (string accessToken, Item item)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling ItemsApi->ItemsPost");

            // verify the required parameter 'item' is set
            if (item == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'item' when calling ItemsApi->ItemsPost");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.HeaderParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "Authorization", $"Bearer {accessToken}"));
            localVarRequestOptions.Data = item;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
