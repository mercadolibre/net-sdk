/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MeliLibTools.Client.OpenAPIDateConverter;

namespace MeliLibTools.Model
{
    /// <summary>
    /// VariationsAttributeCombinations
    /// </summary>
    [DataContract]
    public partial class VariationsAttributeCombinations :  IEquatable<VariationsAttributeCombinations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariationsAttributeCombinations" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="valueId">valueId.</param>
        /// <param name="valueName">valueName.</param>
        public VariationsAttributeCombinations(string name = default(string), string valueId = default(string), string valueName = default(string))
        {
            this.Name = name;
            this.ValueId = valueId;
            this.ValueName = valueName;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValueId
        /// </summary>
        [DataMember(Name="value_id", EmitDefaultValue=false)]
        public string ValueId { get; set; }

        /// <summary>
        /// Gets or Sets ValueName
        /// </summary>
        [DataMember(Name="value_name", EmitDefaultValue=false)]
        public string ValueName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariationsAttributeCombinations {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValueId: ").Append(ValueId).Append("\n");
            sb.Append("  ValueName: ").Append(ValueName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariationsAttributeCombinations);
        }

        /// <summary>
        /// Returns true if VariationsAttributeCombinations instances are equal
        /// </summary>
        /// <param name="input">Instance of VariationsAttributeCombinations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariationsAttributeCombinations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ValueId == input.ValueId ||
                    (this.ValueId != null &&
                    this.ValueId.Equals(input.ValueId))
                ) && 
                (
                    this.ValueName == input.ValueName ||
                    (this.ValueName != null &&
                    this.ValueName.Equals(input.ValueName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ValueId != null)
                    hashCode = hashCode * 59 + this.ValueId.GetHashCode();
                if (this.ValueName != null)
                    hashCode = hashCode * 59 + this.ValueName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
