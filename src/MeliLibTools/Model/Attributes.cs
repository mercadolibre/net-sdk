/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MeliLibTools.Client.OpenAPIDateConverter;

namespace MeliLibTools.Model
{
    /// <summary>
    /// Attributes
    /// </summary>
    [DataContract]
    public partial class Attributes :  IEquatable<Attributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Attributes" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="valueId">valueId.</param>
        /// <param name="valueName">valueName.</param>
        /// <param name="valueStruct">valueStruct.</param>
        /// <param name="values">values.</param>
        /// <param name="attributeGroupId">attributeGroupId.</param>
        /// <param name="attributeGroupName">attributeGroupName.</param>
        public Attributes(string id = default(string), string name = default(string), string valueId = default(string), string valueName = default(string), AttributesValueStruct valueStruct = default(AttributesValueStruct), List<AttributesValues> values = default(List<AttributesValues>), string attributeGroupId = default(string), string attributeGroupName = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.ValueId = valueId;
            this.ValueName = valueName;
            this.ValueStruct = valueStruct;
            this.Values = values;
            this.AttributeGroupId = attributeGroupId;
            this.AttributeGroupName = attributeGroupName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValueId
        /// </summary>
        [DataMember(Name="value_id", EmitDefaultValue=true)]
        public string ValueId { get; set; }

        /// <summary>
        /// Gets or Sets ValueName
        /// </summary>
        [DataMember(Name="value_name", EmitDefaultValue=false)]
        public string ValueName { get; set; }

        /// <summary>
        /// Gets or Sets ValueStruct
        /// </summary>
        [DataMember(Name="value_struct", EmitDefaultValue=true)]
        public AttributesValueStruct ValueStruct { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<AttributesValues> Values { get; set; }

        /// <summary>
        /// Gets or Sets AttributeGroupId
        /// </summary>
        [DataMember(Name="attribute_group_id", EmitDefaultValue=false)]
        public string AttributeGroupId { get; set; }

        /// <summary>
        /// Gets or Sets AttributeGroupName
        /// </summary>
        [DataMember(Name="attribute_group_name", EmitDefaultValue=false)]
        public string AttributeGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attributes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValueId: ").Append(ValueId).Append("\n");
            sb.Append("  ValueName: ").Append(ValueName).Append("\n");
            sb.Append("  ValueStruct: ").Append(ValueStruct).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  AttributeGroupId: ").Append(AttributeGroupId).Append("\n");
            sb.Append("  AttributeGroupName: ").Append(AttributeGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Attributes);
        }

        /// <summary>
        /// Returns true if Attributes instances are equal
        /// </summary>
        /// <param name="input">Instance of Attributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ValueId == input.ValueId ||
                    (this.ValueId != null &&
                    this.ValueId.Equals(input.ValueId))
                ) && 
                (
                    this.ValueName == input.ValueName ||
                    (this.ValueName != null &&
                    this.ValueName.Equals(input.ValueName))
                ) && 
                (
                    this.ValueStruct == input.ValueStruct ||
                    (this.ValueStruct != null &&
                    this.ValueStruct.Equals(input.ValueStruct))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.AttributeGroupId == input.AttributeGroupId ||
                    (this.AttributeGroupId != null &&
                    this.AttributeGroupId.Equals(input.AttributeGroupId))
                ) && 
                (
                    this.AttributeGroupName == input.AttributeGroupName ||
                    (this.AttributeGroupName != null &&
                    this.AttributeGroupName.Equals(input.AttributeGroupName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ValueId != null)
                    hashCode = hashCode * 59 + this.ValueId.GetHashCode();
                if (this.ValueName != null)
                    hashCode = hashCode * 59 + this.ValueName.GetHashCode();
                if (this.ValueStruct != null)
                    hashCode = hashCode * 59 + this.ValueStruct.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.AttributeGroupId != null)
                    hashCode = hashCode * 59 + this.AttributeGroupId.GetHashCode();
                if (this.AttributeGroupName != null)
                    hashCode = hashCode * 59 + this.AttributeGroupName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
