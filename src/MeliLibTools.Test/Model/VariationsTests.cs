/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using MeliLibTools.MeliLibApi;
using MeliLibTools.Model;
using MeliLibTools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace MeliLibTools.Test
{
    /// <summary>
    ///  Class for testing Variations
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class VariationsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Variations
        //private Variations instance;

        public VariationsTests()
        {
            // TODO uncomment below to create an instance of Variations
            //instance = new Variations();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Variations
        /// </summary>
        [Fact]
        public void VariationsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Variations
            //Assert.IsInstanceOfType<Variations> (instance, "variable 'instance' is a Variations");
        }


        /// <summary>
        /// Test the property 'Price'
        /// </summary>
        [Fact]
        public void PriceTest()
        {
            // TODO unit test for the property 'Price'
        }
        /// <summary>
        /// Test the property 'AttributeCombinations'
        /// </summary>
        [Fact]
        public void AttributeCombinationsTest()
        {
            // TODO unit test for the property 'AttributeCombinations'
        }
        /// <summary>
        /// Test the property 'AvailableQuantity'
        /// </summary>
        [Fact]
        public void AvailableQuantityTest()
        {
            // TODO unit test for the property 'AvailableQuantity'
        }
        /// <summary>
        /// Test the property 'SoldQuantity'
        /// </summary>
        [Fact]
        public void SoldQuantityTest()
        {
            // TODO unit test for the property 'SoldQuantity'
        }
        /// <summary>
        /// Test the property 'PictureIds'
        /// </summary>
        [Fact]
        public void PictureIdsTest()
        {
            // TODO unit test for the property 'PictureIds'
        }

    }

}
